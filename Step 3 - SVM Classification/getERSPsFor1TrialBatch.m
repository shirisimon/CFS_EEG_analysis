clear all

subject = {'324' '325' '326' '328' '329' '331' '332' '333' '334' '335' '336' '340'...
                   '342' '344' '345' '346' '347' '348' '350'};
condition = {'ActRec4', 'ActRec1'};
conditionNum = {{'114', '124', '134'}, {'111' '121' '131'}};
elc = [13 27 50 64];

%% 1. Parameters:
limits = [-1 2];
power_baseline = [-600 0];

for s = 1:size(subject,2)
    for c = 1:2
        input_path = ['F:\Study 3 - MNS response to invisible actions\EEG\Data\' subject{s} '\Epochs\'];
        input_name = [condition{c} '_' subject{s} '_0.5-40flt_M1M2ref_evtEdited_clean-COelcs'];
        output_name = [subject{s} '_ERSP'];
        output_path = 'F:\Study 3 - MNS response to invisible actions\EEG\Results\Step 3 - SVM Classification\';
        mkdir(output_path);
        EEG = pop_loadset('filename',[input_name '.set'] ,'filepath',input_path);
        
        %% 2. Extract epochs to ERSP limits
        if ~all(limits == [EEG.xmin, EEG.xmax])
            EEG = pop_epoch(EEG, conditionNum{c}, limits, 'epochinfo', 'yes');
        end
        
        %% 3. do ERSP
        for e = 1:size(elc,2)
            allersp = zeros(54,200,size(EEG.data,3));
            for t = 1:size(EEG.data,3)
                disp(['GETTING ERSP FOR SUBJECT ' num2str(s) '\19, ' , ...
                    'CONDITION ' num2str(c) '\2, ', ...
                    'ELECTRODE ' num2str(e) '\4, ', ...
                    'TRIAL ' num2str(t) '\' num2str(size(EEG.data,3))]);
                [ERSP,~,~,timesout,freqsout] = newtimef( EEG.data(elc(e),:,t), ...
                    size(EEG.data,2) , ...
                    limits*1000, ...
                    256, ...
                    [3 0.5] , ...
                    'alpha',0.05,...
                    'freqs', [3 30], ...
                    'nfreqs', 54, ...
                    'padratio', 2, ...
                    'verbose', 'off', ...
                    'plotersp', 'off', ...
                    'plotitc', 'off', ...
                    'baseline', power_baseline, ...
                    'trialbase', 'full');
                allersp(:,:,t) = double(ERSP);
            end
            eval(['elc' num2str(elc(e)) '.allersp = allersp;']);
            eval([condition{c} '_data.elc' num2str(elc(e)) ' = elc' num2str(elc(e)) ';']);
            eval([condition{c} '_data.trialNum = size(EEG.data,3);']);
        end
    end
    
    %% 4. Save results:
    save([output_path output_name '.mat'], [condition{1} '_data'], ...
        [condition{2} '_data'], 'timesout', 'freqsout', ...
        'limits', 'power_baseline');
end
